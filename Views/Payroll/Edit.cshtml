@using CloudHRMS.Models.ViewModels
@model PayrollViewModel
@{
    TempData["Title"] = "Payroll Edit";
}
<h3>Payroll Edit</h3>
@{
    var info = TempData["info"];
}
<form id="payroll" action="/payroll/update" method="post">
    <input type="hidden" name="Id" value="@Model.Id" /> <!--更新処理のためにIdを取得する-->
    <div class="mb-3">
        <label class="form-label">EmployeeInfo:</label>
        <select class="form-select" name="EmployeeId" required>
            @foreach (var employee in ViewBag.EmployeeData)
            {
                @if (employee.Id == Model.EmployeeId)
                {
                    <option value="@employee.Id" selected>@employee.Code</option>
                }
                else
                {
                    <option value="@employee.Id">@employee.Code</option>
                }
            }
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label">FromDate:</label>
        <input type="date" class="form-control" id="FromDate" name="FromDate" required value="@Model.FromDate.ToString("yyyy-MM-dd")" />
    </div>

    <div class="mb-3">
        <label class="form-label">ToDate</label>
        <input type="date" class="form-control" id="ToDate" name="ToDate" required value="@Model.ToDate.ToString("yyyy-MM-dd")" />
    </div>

    <div class="mb-3">
        <label class="form-label">IncomeTax:</label>
        <input type="number" class="form-control" name="IncomeTax" placeholder="Type income tax(zero if no)...." required value="@Model.IncomeTax" />
    </div>

    <div class="mb-3">
        <label class="form-label">GrossPay:</label>
        <input type="number" class="form-control" name="GrossPay" placeholder="Type gross pay(zero if no)...." required value="@Model.GrossPay" />
    </div>

    <div class="mb-3">
        <label class="form-label">NetPay:</label>
        <input type="number" class="form-control" name="NetPay" placeholder="Type net pay(zero if no)...." required value="@Model.NetPay" />
    </div>

    <div class="mb-3">
        <label class="form-label">Allowlance:</label>
        <input type="number" class="form-control" name="Allowlance" placeholder="Type allowlance(zero if no)...." required value="@Model.Allowlance" />
    </div>

    <div class="mb-3">
        <label class="form-label">Deduction:</label>
        <input type="number" class="form-control" name="Deduction" placeholder="Type deduction(zero if no)...." required value="@Model.Deduction" />
    </div>

    <div class="mb-3">
        <label class="form-label">AttendanceDays:</label>
        <input type="number" class="form-control" name="AttendanceDays" placeholder="Type attendance days(zero if no)...." required value="@Model.AttendanceDays" />
    </div>

    <div class="mb-3">
        <label class="form-label">AttendanceDeduction:</label>
        <input type="number" class="form-control" name="AttendanceDeduction" placeholder="Type attendance deduction(zero if no)...." required value="@Model.AttendanceDeduction" />
    </div>

    <div>
        <label class="form-label">Created On:</label>
        <input type="text" class="form-control" required value="@Model.CreatedOn" readonly name="CreatedOn">
    </div>
    <div class="mb-3">
        <label class="form-label">Modified On:</label>
        <input type="text" class="form-control" required value="@Model.UpdatedOn" readonly>
    </div>
    <button type="submit" class="btn btn-primary" id="update">Update</button>
    <a href="/payroll/list" class="btn btn-outline-primary">GoTo List</a>

    <!--javascript-->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {

            //set min date of todate based on fromdate
            document.getElementById('FromDate').addEventListener('change', function () {
                const fromDate = this.value;
                const toInputDate = document.getElementById('ToDate');
                if (fromDate) {
                    const minToDate = new Date(fromDate);
                    minToDate.setDate(minToDate.getDate() + 1);
                    //setting up to match date format
                    const formattedMinDate = minToDate.toISOString().split('T')[0];
                    toInputDate.min = formattedMinDate;
                } else {
                    toDateInput.removeAttribute('min');
                }
            });

            //check form validity
            function checkFormValidity() {
                const form = document.getElementById('payroll');
                if (form.checkValidity()) {
                    $('#update').prop('disabled', false);
                } else {
                    $('#update').prop('disabled', true);
                }
            }

            checkFormValidity();

            // Add event listeners to form inputs to trigger validation check on change
            $('#payroll input, #payroll select').on('input change', function () {
                checkFormValidity();
            });
        });
    </script>
</form>